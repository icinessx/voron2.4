###############################
######    自定义宏脚本    ######
###############################

## 根据XYZ轴的情况判断是否需要进行G28归零
[gcode_macro _CG28]
description: 如果各轴未归零则执行归零操作，否则不执行归零
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}   # 判断已经归零的轴是否是XYZ
    STATUS_HOMING                                     # 设置SB灯颜色
    G28                                               # 执行归零
  {% endif %}

[gcode_macro M300]
gcode:
    {% set S = params.S|default(1000)|int %}
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0

## G-CODE文件保存位置
[virtual_sdcard]
path: ~/printer_data/gcodes

# 排除打印对象 (aka Marlin/RRF M486 commands)
# 对象预处理下载 https://github.com/kageurufu/cancelobject-preprocessor/releases

[display_status]
#显示信息： M117 <消息内容>
#设置构建百分比：M73 P<百分比数字>

## 打印消息
[gcode_macro _MESSAGE]
description: 在屏幕和终端打印消息，使用方法：_MESSAGE [LCD=true] TEXT="<消息内容>"
gcode:
    {% if params.LCD|default('false') == 'true' %} M117 {params.TEXT} {% endif %}
    {action_respond_info(params.TEXT)}
    
[exclude_object]

#%%%%%%%%%%%%%% XYZ复位 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
[homing_override]
axes: z
set_position_z: 0
gcode:
   G90
   G0 Z10 F600
   G28 X Y
   ## XY Location of the Z Endstop Switch
   ## Update X0 and Y0 to your values (such as X157, Y305) after going through
   ## Z Endstop Pin Location Definition step.
   #以下一行XY坐标根据自己的Z限位位置修改保存（使用G28 X Y,完成XY轴复位，手动移动喷嘴走到Z复位传感器正上方，M114读取坐标）
   G0 X150 Y150 F3600  
   
   #以下XYZ坐标机器完成复位后，喷头停留的位置，根据自己的需求可以调整
   G28 Z
   G0 Z10 F1800
#   G0 X150 Y150 Z20.05 F3600

#%%%%%%%%%%%%%% Voron2 4Z调平 %%%%%%%%%%%%%%%%%%%%%%%%
[quad_gantry_level]
gantry_corners:
  -60,-10
  360,370
##  探测点
points:
  50,25
  50,225
  250,225
  250,25

speed: 300                        # 校准期间非探测运动速度(mm/s)
horizontal_move_z: 10             # 校准开始前Z的起始高度(mm)
retries: 5                        # 探测的结果超过retry_tolerance的值，重复采样的次数
retry_tolerance: 0.006            # 使用TAP，如果采样结果的最大值和最小值的差超过此设置，则重试采样
#retry_tolerance: 0.015           # 使用PL08N，如果采样结果的最大值和最小值的差超过此设置，则重试采样
max_adjust: 10                    # 采样时Z的最大行程，如果超过这个值还未触发传感器，则停止调平

####################探床#######################################
[bed_mesh]
speed: 200                                                                      # 校准期间非探测运动速度(mm/s)
horizontal_move_z: 10                                                           # 校准开始前Z的起始高度(mm)
mesh_min: 40,40                   # 起始坐标
mesh_max: 260,260                 # 结束坐标
mesh_pps: 2,2                     # 网格插值
probe_count: 9,9                  # 定义沿每个轴探测的点数
algorithm: bicubic                # 使用的插值算法，lagrange 或者 bicubic
zero_reference_position: 150,150  # 定义Z为0的XY位置坐标
fade_end: 10                      #（可选）GCode分析和网床补偿的最高高度

[adaptive_bed_mesh]
arc_segments: 80                     #（可选）G2/3解码为直线运动的细分数量。
mesh_area_clearance: 5               #（可选）以毫米为单位扩展打印区域之外的网格区域。
max_probe_horizontal_distance: 50    #（可选）水平探针点之间的最大距离（水平）（单位：毫米）。
max_probe_vertical_distance: 50      #（可选）垂直探针点之间的最大距离（单位：毫米）。
use_relative_reference_index: False  #（可选）对于旧版Klipper（<0.11.2xx），`use_relative_reference_index`用于确定中心点。对于新版本不需要此项。

# (可选) 关闭特定的边界检测算法
disable_slicer_min_max_boundary_detection: False
disable_exclude_object_boundary_detection: False
disable_gcode_analysis_boundary_detection: False


[temperature_sensor 树莓派]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor MUC]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

################################################################################
[gcode_macro G32]
description: 四Z调平
gcode:
    STATUS_LEVELING
    BED_MESH_CLEAR                           #释放已加载的热床补偿数据（需开启bed_mesh时有效,平常可忽略)BED_MESH_CLEAR
    G28                                        #三轴复位 
    QUAD_GANTRY_LEVEL                        #4z调平
    G28 Z                                     # 重新进行Z归零，修复QGL造成的误差

## 打印开始前执行的宏
# 在切片软件的开始G-CODE填入
# CURA 5.0：
# PRINT_START EXTRUDER={material_print_temperature_layer_0} BED={material_bed_temperature_layer_0} CHAMBER={build_volume_temperature} NOZZLE={machine_nozzle_size} FILAMENT={material_type} PRINT_MIN=%MINX%,%MINY% PRINT_MAX=%MAXX%,%MAXY%

# SuperSlicer：
# M190 S0
# M109 S0 ; uncomment to remove set&wait temp gcode added automatically after this start gcode
# PRINT_START EXTRUDER={first_layer_temperature[initial_extruder] + extruder_temperature_offset[initial_extruder]} BED=[first_layer_bed_temperature] CHAMBER=[chamber_temperature] NOZZLE=[nozzle_diameter] FILAMENT=[filament_type] PRINT_MIN={first_layer_print_min[0]},{first_layer_print_min[1]} PRINT_MAX={first_layer_print_max[0]},{first_layer_print_max[1]}

# PrusaSlicer
# M190 S0
# M109 S0 ; uncomment to remove set&wait temp gcode added automatically after this start gcode 
# print_start EXTRUDER=[first_layer_temperature[initial_tool]]  BED=[first_layer_bed_temperature] NOZZLE=[nozzle_diameter] PRINT_MIN={first_layer_print_min[0]},{first_layer_print_min[1]} PRINT_MAX={first_layer_print_max[0]},{first_layer_print_max[1]}


# Bambu:
# M190 S0
# M109 S0
# PRINT_START EXTRUDER=[nozzle_temperature_initial_layer] BED=[bed_temperature_initial_layer_single] CHAMBER=[chamber_temperature] NOZZLE={nozzle_diameter[0]} FILAMENT=[filament_type] PRINT_MIN={first_layer_print_min[0]},{first_layer_print_min[1]} PRINT_MAX={first_layer_print_max[0]},{first_layer_print_max[1]}

[gcode_macro PRINT_START]
description: 打印开始前进行的操作
gcode:
    CLEAR_PAUSE                                                                                                       # 清空暂停缓存
    BED_MESH_CLEAR                                                                                                    # 清除网床
    # 设置变量参数 
    {% set EXTRUDER_TEMP = params.EXTRUDER|default(200)|int %}                                                        # 从切片中获取打印头温度    
    {% set BED_TEMP = params.BED|default(60)|int %}                                                                   # 从切片中获取热床温度    
#    {% set CHAMBER_TEMP = params.CHAMBER|default(0)|int %}                                                           # 从切片中获取仓温温度
#    {% set FILAMENT_TYPE = params.FILAMENT|default("PLA")|string %}                                                  # 从切片中获取耗材类型
    {% set NOZZLE_SIZE = params.NOZZLE|default(0.4)|int %}                                                            # 从切片中获取喷嘴大小
#    SAVE_VARIABLE VARIABLE=filament_type VALUE='"{FILAMENT_TYPE}"'                                                   # 保存耗材类型到变量文件
    SAVE_VARIABLE VARIABLE=extruder_temp VALUE={EXTRUDER_TEMP}                                                        # 保存挤出机温度到变量文件
    G28                                                                                                               #归零
    M140 S{BED_TEMP}                                                                                                  # 设置热床目标温度
    M104 S150                                                                                                         # 设置打印头预热温度
    G32                                                                                                               # 龙门架调平
    STATUS_MESHING                                                                                                    # 设置SB灯颜色
#    BED_MESH_CALIBRATE ADAPTIVE=1
    ADAPTIVE_BED_MESH_CALIBRATE AREA_START={params.PRINT_MIN} AREA_END={params.PRINT_MAX}                             # 自适应网床探测，需要安装插件 https://github.com/eamars/klipper_adaptive_bed_mesh
    M109 S{EXTRUDER_TEMP}                                                                                             # 等待挤出机到达指定温度
    MMU_START_LOAD_INITIAL_TOOL
    _PURGE_LINE EXTRUDER_TEMP={EXTRUDER_TEMP} PRINT_MIN={params.PRINT_MIN}                                            # 根据区域床尺寸自适应打印测试线
    STATUS_PRINTING                                                                                                   # 设置SB灯颜色
    _MESSAGE TEXT="开始打印"

## 根据区域床尺寸自适应打印测试线，切片时尽量保证左测至少留空大于10
[gcode_macro _PURGE_LINE]
description: 在打印区域的左边打印一条线，让挤出机做好准备
gcode:
    {% set extruder_temp = params.EXTRUDER_TEMP %}
    {% set print_min_x = params.PRINT_MIN.split(",")[0]|int %}
    {% set print_min_y = params.PRINT_MIN.split(",")[1]|int %}
    _MESSAGE TEXT="参考最小坐标点：({print_min_x},{print_min_y})"                                                            # 将打印的最小坐标点信息输出到控制台
    {% if print_min_x > 25 %}                                                                                         # 如果最小坐标的X轴左边还有大于25mm的空间，则在打印区域的左边画线
        {% set line_start_x = print_min_x - 22 %}
        {% set line_end_x = print_min_x - 22 %}
        {% set line_start_y = print_min_y %}
        {% set line_end_y = print_min_y + 50 %}
    {% elif print_min_x < 25 and print_min_y > 25 %}                                                                  # 如果最小坐标的X轴左边空间小于25mm，但是Y轴的下边有大于25mm的空间，则在打印区域的下边画线
        {% set line_start_x = print_min_x %}
        {% set line_end_x = print_min_x + 50 %}
        {% set line_start_y = print_min_y - 22 %}
        {% set line_end_y = print_min_y - 22 %}
    {% else %}                                                                                                        # 如果两边空间都不足，强制在打印区域左边的床边缘画线
        {% set line_start_x = 5 %}
        {% set line_end_x = 5 %}
        {% set line_start_y = 5 %}
        {% set line_end_y = 55 %}
    {% endif %}
    
    _MESSAGE TEXT="移动到({line_start_x},{line_start_y})，加热热端，准备画线"      # 将打印头将要移动的目的坐标输出到控制台
    G90                                                                       # 切换到相对于原点的坐标系
    G1 X{line_start_x} Y{line_start_y} Z3 F6000                               # 移动到准备位置
    STATUS_HEATING                                                            # 设置SB灯颜色
    M109 S{extruder_temp}                                                     # 等待热端到达指定温度
    G1 Z1 F1500                                                               # 下移喷嘴
    _RESET_EXTRUDER                                                           # 重置挤出机
    G1 E20 F150                                                               # 在原地挤出20mm耗材，黏住喷嘴上面的料
    _RESET_EXTRUDER                                                           # 重置挤出机
    G1 X{line_end_x} Y{line_end_y} Z0.25 F1500 E10                            # 画一条直线
    _RESET_EXTRUDER                                                           # 重置挤出机
    G1 Z2 F3000                                                               # 抬高喷嘴

## 重置挤出机
[gcode_macro _RESET_EXTRUDER]
gcode:
    G92 E0

## 打印结束后执行的宏
[gcode_macro PRINT_END]
description: 打印结束后进行的操作
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 5, th.axis_maximum.z]|min %}
    G90                                                                                                                             # 切换到相对于原点的坐标系
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000                                                                                         # 抬高喷嘴避免烫坏打印件
    M400                                                                                                                            # 等待缓存清空
    _RESET_EXTRUDER                                                                                                                 # 重置挤出机
    G1 E-5.0 F1800                                                                                                                  # 回抽5mm
    MMU_EJECT                                                                                                                       # 多色用[打印完退料  兔子
    TURN_OFF_HEATERS                                                                                                                # 关闭喷头加热
    G0 X{th.axis_maximum.x - 20} Y{th.axis_maximum.y - 20} Z{th.position.z + 50 if th.position.z < 100 else z_safe} F3600           # 停到指定位置
    BED_MESH_CLEAR                                                                                                                  # 清除床网

[gcode_macro POSITION]
gcode:
  GET_POSITION

[pause_resume]

[gcode_arcs]
resolution: 0.1

## 打印头停到前面
[gcode_macro PARKF_RONT]
description: 打印头停到前面
gcode:
    #{% if printer.idle_timeout.state != "Printing" %}
        _CG28
        SAVE_GCODE_STATE NAME=park_front
        G90
        G0 X{printer.toolhead.axis_maximum.x / 2} Y{printer.toolhead.axis_minimum.y + 10} F10000
        RESTORE_GCODE_STATE NAME=park_front
    #{% else %}
    #    { action_respond_info("PARKFRONT disabled while printing!") }
    #{% endif %}

## 打印头停靠到中间
[gcode_macro PARK_CENTER]
description: 打印头停靠到中间
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=part_center
    G90
    G0 X{printer.toolhead.axis_maximum.x / 2} Y{printer.toolhead.axis_maximum.y / 2} F10000
    RESTORE_GCODE_STATE NAME=part_center

## 打印头停靠到右后侧
[gcode_macro PARK_REARRIGHT]
description: 打印头停靠到右后侧
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=park_rear_right
    G90
    G0 X{printer.toolhead.axis_maximum.x - 10} Y{printer.toolhead.axis_maximum.y - 10} F10000     
    RESTORE_GCODE_STATE NAME=park_rear_right

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT to allow temperature overshoot
[gcode_macro M109]
rename_existing: M109.1
gcode:
    #Parameters
    {% set s = params.S|float %}
    
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s - 0.5}
    {% endif %}


# Replace M190 (Wait for heater bed temperature with TEMPERATURE_WAIT) to allow temperature overshoot and under temperature (within 1 deg)
[gcode_macro M190]
rename_existing: M190.1
gcode:
    #Parameters
    {% set s = params.S|float %}
    
	M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set heater bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s - 0.5}
    {% endif %}

[gcode_macro m201]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set accel = (params.X|default(params.Y)|float,
                    params.Y|default(params.X)|float)|min %}
      SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel * 0.5}
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro m203]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set speed = (params.X|default(params.Y)|float,
                       params.Y|default(params.X)|float)|min %}
    SET_VELOCITY_LIMIT VELOCITY={speed}
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro M205]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set corner_speed = (params.X|default(params.Y)|float,
                       params.Y|default(params.X)|float)|min %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={corner_speed}
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

[gcode_macro M900]
gcode:
      SET_PRESSURE_ADVANCE ADVANCE={params.K}

## 排除打印对象
[gcode_macro M486]
description: 排除打印对象
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("请先添加 [exclude_object] 配置")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

[gcode_macro PROBE_CALIBRATE_NEW]
description: 手动Z偏移调整
gcode:
  G28
  QGL
  G28 Z
  PROBE_CALIBRATE

#耗材在线管理工具spoolman
[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}
  
